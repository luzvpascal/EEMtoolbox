% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ode_solve.R
\name{ode_solve}
\alias{ode_solve}
\title{Solve ODE}
\usage{
ode_solve(
  initial_condition,
  interaction_matrix_value,
  growth_rate,
  t_window,
  time_step_len = 0.01,
  model = "GLV",
  derivative = EEMtoolbox::derivative_func
)
}
\arguments{
\item{initial_condition}{vector of initial species abundances}

\item{interaction_matrix_value}{interaction matrix parametrized. If model is GLV or Gompertz, input a single matrix. If model is Baker, input a list of 2 matrices: the first element is the alphas and the second the betas.}

\item{growth_rate}{parametrized growth rate vector.}

\item{t_window}{time window to solve ODE}

\item{time_step_len}{length of each time step, default = 0.01}

\item{model}{model representing species interactions. Default "GLV" (Generalized Lokta Voltera). options include "Baker", "Gompertz" and "customized"}

\item{derivative}{derivative function. Default \link[EEMtoolbox]{derivative_func}}
}
\value{
list: time_steps: vector of time steps of the simulation
abundances: matrix of abundances, each row corresponds to the values of abundances at a given time step
}
\description{
Solves ODEs
}
\examples{
library(EEMtoolbox)
output <- EEM(dingo_matrix) #automatically loads an example of interaction matrix as dingo_matrix
interaction_matrix_value <- output[[1]]$interaction_matrix
growth_rate <- output[[1]]$growthrates
initial_condition <- rep(10, 8) # 8 species, initial abundance is 10 for all
ode_solve(initial_condition, interaction_matrix_value, growth_rate, t_window=c(0,1))
}
