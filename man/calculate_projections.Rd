% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_projections.R
\name{calculate_projections}
\alias{calculate_projections}
\title{Calculate projections by solving ODEs}
\usage{
calculate_projections(
  parameters,
  initial_condition,
  t_window,
  time_step_len = 0.01,
  model = "GLV",
  derivative = EEMtoolbox::derivative_func,
  scaled = FALSE,
  species_names = NA
)
}
\arguments{
\item{parameters}{list like object of ensemble of parameters (outputs of  \link[EEMtoolbox]{EEM})}

\item{initial_condition}{vector of initial species abundances. If parameter scaled is TRUE, the parameter initial_condition should be scaled to steady state}

\item{t_window}{time window to solve ODE}

\item{time_step_len}{length of each time step, default = 0.01}

\item{model}{model representing species interactions. Default "GLV" (Generalized Lotka Volterra). options include "Bimler-Baker" and "Gompertz".}

\item{derivative}{derivative function. Default \link[EEMtoolbox]{derivative_func}}

\item{scaled}{Boolean indicating if projections should be scaled to steady state. If true, the parameter initial_condition should be scaled too. Default FALSE}

\item{species_names}{vector of strings for names of species. If NA plots only display species index number, . Default NA.}
}
\value{
ggplot of abundances per species
}
\description{
Solves ODEs and plot solutions
}
\examples{
library(EEMtoolbox)
output <- EEM(matrix(c(-1,-1,1,-1),ncol=2)) #automatically loads an example of interaction matrix as dingo_matrix
plot_projections(output,  c(1,1), t_window=c(0,1))
}
